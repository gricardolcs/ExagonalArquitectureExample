buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.mongodb:mongodb-driver-sync:4.5.0'
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.9.RELEASE'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

dependencies {
	implementation project (':becommon')
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	// https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox
	implementation 'org.apache.pdfbox:pdfbox:2.0.24'
	// https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
	implementation 'org.apache.poi:poi-ooxml:5.0.0'
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-webflux
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '2.6.0'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

import com.mongodb.client.MongoClients
import org.bson.Document

project.ext {
	configDB = { ->
		def client = MongoClients.create("mongodb://localhost")
		def database = client.getDatabase("bootcamp_development")
		return database
	}
}

task insertTestDocuments() {
	doLast {
		def dataFilePath = "src/main/resources/test.documents.csv"
		def applicants = project.ext.configDB().getCollection("applicant")
		List<List<String>> applicantFromCSV = new ArrayList<>()
		new File(dataFilePath).splitEachLine(",") { fields ->
			applicantFromCSV.add(fields)
		}
		applicantFromCSV.remove(0)
		println("Database: inserting test documents")
		applicantFromCSV.stream().forEach({ fields ->

			def location = new Document()
			location.append("city", fields[5])
			location.append("country", fields[6])
			def curriculumVitae = new Document()
			curriculumVitae.append("url", fields[9])
			curriculumVitae.append("fileName", "")
			curriculumVitae.append("content", "")

			def applicant = new Document()
			applicant.append("_id", Long.parseLong(fields[0]))
			applicant.append("fullName", fields[1])
			applicant.append("birthday", LocalDate.parse(fields[2]))
			applicant.append("email", fields[3])
			applicant.append("telephone", fields[4])
			applicant.append("location", location)
			applicant.append("career", fields[7])
			applicant.append("degree", fields[8])
			applicant.append("curriculumVitae", curriculumVitae)
			applicant.append("photo", "")
			applicant.append("applicantBootcampHistoryIds", Collections.emptyList())
			applicant.append("reports", Collections.emptyList())
			applicant.append("includedInBootcampIds", Collections.emptyList())
			applicant.append("applicantStageQualifications", Collections.emptyList())
			applicant.append("photo", "")
			applicant.append("_class", "com.jalasoft.bootcamp.applicant.domain.applicant.Applicant")
			applicants.insertOne(applicant)
		})
	}
}

task cleanCollections() {
	doFirst {
		def applicants = project.ext.configDB().getCollection("applicant")
		println("Database: cleaning collections")
		applicants.drop()
	}
}

bootRun.configure {
	shouldRunAfter(cleanCollections)
	shouldRunAfter(insertTestDocuments)
}
insertTestDocuments.dependsOn(cleanCollections)

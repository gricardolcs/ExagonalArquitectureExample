buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.postgresql:postgresql:42.2.5'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.9.RELEASE'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'groovy'
}

dependencies {
    implementation project (':becommon')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.4.3'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.4'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

import groovy.sql.Sql
@GrabConfig(systemClassLoader = true)
@Grab(group = 'org.postgresql', module = 'postgresql', version = '42.2.5')
import org.postgresql.Driver

project.ext {
    configDB = { callBack ->
        def driver = Class.forName('org.postgresql.Driver').newInstance() as Driver
        def properties = new Properties()
        properties.setProperty("user", "postgres")
        properties.setProperty("password", "postgres")
        def connection = driver.connect("jdbc:postgresql://localhost:5432/bootcamp", properties)
        def sql = new Sql(connection)
        callBack(sql)
    }
}


task cleanTables() {
    doLast {
        println('Database: cleaning tables')
        def callback = { sql ->
            def sqlFilePath = "src/main/resources/clean.tables.sql"
            def sqlString = new File(sqlFilePath).text
            sql.execute(sqlString)
        }
        project.ext.configDB(callback)
    }
}

task insertMandatoryData() {
    doFirst {
        println('Database: inserting mandatory data')
        def callback = { sql ->
            def sqlFilePath = "src/main/resources/base.data.sql"
            def sqlString = new File(sqlFilePath).text
            sql.execute(sqlString)
        }
        project.ext.configDB(callback)
    }
}

task insertTestData() {
    doFirst {
        println('Database: inserting test data')
        def callback = { sql ->
            def sqlFilePath = "src/main/resources/test.data.sql"
            def sqlString = new File(sqlFilePath).text
            sql.execute(sqlString)
        }
        project.ext.configDB(callback)
    }
}

insertMandatoryData.configure {
    dependsOn(cleanTables)
}

insertTestData.configure {
    dependsOn(insertMandatoryData)
}
